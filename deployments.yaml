# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: my-deployment
#   labels:
#     app: my-app
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: my-app
#   template:
#     metadata:
#       labels:
#         app: my-app
#     spec:
#       imagePullSecrets:
#       - name: jfrog-image-pull-secret
#       containers:
#       - name: my-app
#         image: jenkinsjfrogserver11.jfrog.io/docker-repository-docker/dotnet-image:latest
#         ports:
#         - containerPort: 5000
#         env:
#         - name: ASPNETCORE_URLS
#           value: http://*:5000
# ---
# apiVersion: v1
# data:
#   .dockerconfigjson: eyJhdXRocyI6eyJqZW5raW5zamZyb2dzZXJ2ZXIyMzEuamZyb2cuaW8iOnsidXNlcm5hbWUiOiJhbWl0eWE4NzY5QGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiSmZyb2dASmVua2luc0BQYXNzQDQxMzIiLCJlbWFpbCI6ImFtaXR5YTg3NjlAZ21haWwuY29tIiwiYXV0aCI6IllXMXBkSGxoT0RjMk9VQm5iV0ZwYkM1amIyMDZTbVp5YjJkQVNtVnVhMmx1YzBCUVlYTnpRRFF4TXpJPSJ9fX0=
# kind: Secret
# metadata:
#   name: jfrog-image-pull-secret
#   namespace: devops-tools
# type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnY3IuaW8iOnsidXNlcm5hbWUiOiJfanNvbl9rZXkiLCJwYXNzd29yZCI6IntcbiAgXCJ0eXBlXCI6IFwic2VydmljZV9hY2NvdW50XCIsXG4gIFwicHJvamVjdF9pZFwiOiBcImxleGljYWwtYWNvbHl0ZS0zNTI4MDVcIixcbiAgXCJwcml2YXRlX2tleV9pZFwiOiBcIjA3YzAzNzgyYjBmNjFkZWM1NmJkZjE0MjNjYzlhM2FmMTFhZDI5ZWNcIixcbiAgXCJwcml2YXRlX2tleVwiOiBcIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRREVuRjVCQlhBVHhQQ3hcXG4zTmRvL29OdS9TVCtNTmx2aXMvSnF3NkE0dnU4cTZjbGh5ejBXMDlYaXZlcFpsZFcrcXhEbXRQd3pjZnpGS0l5XFxuSzc4M1huQyswZkpLSTNCK2daQkdoaXNhNkFFZUZkYkFoekg1NjBaU3F3b3lEaDh0L2lOMDVVRDFHNjkxQnY4Q1xcblBDU3doY3pOSXA5N3pna1NSM3A4RjVDV1ljb3JONVkwVGYwWjM3UEY2ZC94azBQaWh2RURvL1I1Y2EwSmdrdllcXG45Mno0NU82OGJjMHd4Z1ViSnRmUi94M3FvN0I2U09MQlY1RWo5M1RnQjB1VW5ycnd6NHZYcDBLK29uV3ZUM2RQXFxuczZXbFYyWVA0QlY2ZzMzeGpHdmNjZFZZUG1TcjVuby9xQktmV2NLRkMyQ3lxcGkrdXQwZ2w3QW5ZVnM3M2JZdlxcbkdEenJBRmpMQWdNQkFBRUNnZ0VBQ3BjSmxLTUFXSEJCTHJOZ2Z1MUdreEhiamoxL1dMeTNXSHQ0T29UL1hqZzRcXG50cExEWHg0VDlma3NRZG1iVnJvRjBWWmptQkxkZEVCbVJDR0xHU1pqR0VRaXNzK1ozWmFJK09OOUt1UFlPNUNkXFxua3AwMW1lcU1UU09kVnZqZndSQnhSSGljdVJjV3FrMElLMHltQlVRUHRmVHBkamV3MFdVOE9iYmpPTlpubDFBOFxcbjNnSmFvRWU4TXd5N0NpeWdTNXFiemZtd2tpQlUvaXRIUVdqNFNDc21FS25RTWhDMFI2V3MrOEpJK3B3NytsTndcXG5MMEtBUWttbW5ZTXRBS1RBU3VTU3pmZlNWbXBkU3diMnNpdlBDcWNlWm50MTB6OU1NcVM0alJrQ0x2dzdwSEM2XFxuL05KOTFsR0JNd2FOWDEyeElGZCtPckhXT1BEUm92d1VHendyQWdySjhRS0JnUUQ1MGdpNHIvTkxkUHdSK09DZ1xcbkRUUzlZRG5xMWp0ejFlTGhJb3dIT2dtamV3bVJzT292OWJ3SFRMSEVuTElqMTgxRTdwUEdjYm9ZSWtTK0ZwQXVcXG5BalBmQ1YrWkFINElsQnZydjl1ZElGcFk3WGlzQ0NZNjJZeHRHRUlDMGwwSlJjaDhtTE4vTzBnUTMyYTZMeU54XFxucE5YMVkwcjZXOWVTZ3NtVTBvKy91VjV6TlFLQmdRREplV09JK1EzZ3BQeHloM0dnZXdvRGNSOEMxWG5naTFxUVxcbk9vbHhqblFtM1Fmc1VLZVhuMmExSmcveFBuc202MVlvbEE2R0NMRUthdlN6TjNCaTVVTTRsbVNtUHBsYUFUaGFcXG5CU1dMQmpXdndZYVM0S2tEdHVaaGphN0pZci96cFFuZkZLVXdqdWVGaEFMbU1ZQng4TTFkNzNyRVkxSjdJN1NjXFxuL01rRDdGRWIvd0tCZ1FESGg3SGZrT2pKUTg1d3JFNzhobyt4RWNJd2hwdEZrWGQ4U1pOOTBpVVFwWnltK0o2VFxcblg3bW1PdU5oSGFaS2FucFFyQnpyU3JwUHZFOGJZL29VUlQ0WXpldkUwRmZaa2pJYXdVb3UzVUJMOXArREI1OUJcXG5NYkN2RWNqbmFBMVc4cDJHcG8vMjl1cEFUNjVFMXBHQW14OG90djJUcVBjczFia2JYSEhqdDdKd1lRS0JnUURFXFxuNU1PWVJjVUJLRnVwMWFIKzhwOXJrNjU1eDRSdkkrRGltTUpmWHBjMnI4V2hkWVVEVVgwL1JTNUpWZ1ZtbUpDL1xcbjRVbDhSWnczRVNXSXk0SWlzK2tJc1RrMW1uR2xteEdtTCtkcndTclFVM0dmc3J5WjY3R2ozcUhWSDVOMW1YRlhcXG5PTWJpK0pWY1R4SENRdGhEQWREQm4xczc5OURRbEtsYXpsUG9hSmN2b3dLQmdITDdnQW9kR0NNOUtGZ3ZiL1IvXFxueDI3VkxheFROdnprSm9ZSXZkM2F3SVV0WEo3OTE0V3RTbTFVWGlKY2c5MHQrYVUxL3RZeXNJa091RnZHWHlBblxcbkdIa2RpNUJqOVpzTHhNTGU5UXBkeU5MUlJUUFVQMkptSDAxb3VmczJkMlFPdG0ybWc2alQ0VlVFWk4xMy9yQnVcXG5HY0I5MW5HMWI0aEZMYmEyamFtQWYvek5cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXFxuXCIsXG4gIFwiY2xpZW50X2VtYWlsXCI6IFwiZ2NyLWFjY2Vzcy10by1qZW5raW5zQGxleGljYWwtYWNvbHl0ZS0zNTI4MDUuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb21cIixcbiAgXCJjbGllbnRfaWRcIjogXCIxMTY3NDgyMTYyNzY4NzE1NTk3NTFcIixcbiAgXCJhdXRoX3VyaVwiOiBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoXCIsXG4gIFwidG9rZW5fdXJpXCI6IFwiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW5cIixcbiAgXCJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmxcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvY2VydHNcIixcbiAgXCJjbGllbnRfeDUwOV9jZXJ0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvZ2NyLWFjY2Vzcy10by1qZW5raW5zJTQwbGV4aWNhbC1hY29seXRlLTM1MjgwNS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbVwiXG59IiwiZW1haWwiOiJhbWl0eWE4NzY5QGdtYWlsLmNvbSIsImF1dGgiOiJYMnB6YjI1ZmEyVjVPbnNLSUNBaWRIbHdaU0k2SUNKelpYSjJhV05sWDJGalkyOTFiblFpTEFvZ0lDSndjbTlxWldOMFgybGtJam9nSW14bGVHbGpZV3d0WVdOdmJIbDBaUzB6TlRJNE1EVWlMQW9nSUNKd2NtbDJZWFJsWDJ0bGVWOXBaQ0k2SUNJd04yTXdNemM0TW1Jd1pqWXhaR1ZqTlRaaVpHWXhOREl6WTJNNVlUTmhaakV4WVdReU9XVmpJaXdLSUNBaWNISnBkbUYwWlY5clpYa2lPaUFpTFMwdExTMUNSVWRKVGlCUVVrbFdRVlJGSUV0RldTMHRMUzB0WEc1TlNVbEZkbWRKUWtGRVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVVWR1FVRlRRMEpMWjNkbloxTnJRV2RGUVVGdlNVSkJVVVJGYmtZMVFrSllRVlI0VUVONFhHNHpUbVJ2TDI5T2RTOVRWQ3ROVG14MmFYTXZTbkYzTmtFMGRuVTRjVFpqYkdoNWVqQlhNRGxZYVhabGNGcHNaRmNyY1hoRWJYUlFkM3BqWm5wR1MwbDVYRzVMTnpneldHNURLekJtU2t0Sk0wSXJaMXBDUjJocGMyRTJRVVZsUm1SaVFXaDZTRFUyTUZwVGNYZHZlVVJvT0hRdmFVNHdOVlZFTVVjMk9URkNkamhEWEc1UVExTjNhR042VGtsd09UZDZaMnRUVWpOd09FWTFRMWRaWTI5eVRqVlpNRlJtTUZvek4xQkdObVF2ZUdzd1VHbG9ka1ZFYnk5U05XTmhNRXBuYTNaWlhHNDVNbm8wTlU4Mk9HSmpNSGQ0WjFWaVNuUm1VaTk0TTNGdk4wSTJVMDlNUWxZMVJXbzVNMVJuUWpCMVZXNXljbmQ2TkhaWWNEQkxLMjl1VjNaVU0yUlFYRzV6Tmxkc1ZqSlpVRFJDVmpabk16TjRha2QyWTJOa1ZsbFFiVk55Tlc1dkwzRkNTMlpYWTB0R1F6SkRlWEZ3YVN0MWREQm5iRGRCYmxsV2N6Y3pZbGwyWEc1SFJIcHlRVVpxVEVGblRVSkJRVVZEWjJkRlFVTndZMHBzUzAxQlYwaENRa3h5VG1kbWRURkhhM2hJWW1wcU1TOVhUSGt6VjBoME5FOXZWQzlZYW1jMFhHNTBjRXhFV0hnMFZEbG1hM05SWkcxaVZuSnZSakJXV21wdFFreGtaRVZDYlZKRFIweEhVMXBxUjBWUmFYTnpLMW96V21GSkswOU9PVXQxVUZsUE5VTmtYRzVyY0RBeGJXVnhUVlJUVDJSV2RtcG1kMUpDZUZKSWFXTjFVbU5YY1dzd1NVc3dlVzFDVlZGUWRHWlVjR1JxWlhjd1YxVTRUMkppYWs5T1dtNXNNVUU0WEc0elowcGhiMFZsT0UxM2VUZERhWGxuVXpWeFlucG1iWGRyYVVKVkwybDBTRkZYYWpSVFEzTnRSVXR1VVUxb1F6QlNObGR6S3poS1NTdHdkemNyYkU1M1hHNU1NRXRCVVd0dGJXNVpUWFJCUzFSQlUzVlRVM3BtWmxOV2JYQmtVM2RpTW5OcGRsQkRjV05sV201ME1UQjZPVTFOY1ZNMGFsSnJRMHgyZHpkd1NFTTJYRzR2VGtvNU1XeEhRazEzWVU1WU1USjRTVVprSzA5eVNGZFBVRVJTYjNaM1ZVZDZkM0pCWjNKS09GRkxRbWRSUkRVd1oyazBjaTlPVEdSUWQxSXJUME5uWEc1RVZGTTVXVVJ1Y1RGcWRIb3haVXhvU1c5M1NFOW5iV3BsZDIxU2MwOXZkamxpZDBoVVRFaEZia3hKYWpFNE1VVTNjRkJIWTJKdldVbHJVeXRHY0VGMVhHNUJhbEJtUTFZcldrRklORWxzUW5aeWRqbDFaRWxHY0ZrM1dHbHpRME5aTmpKWmVIUkhSVWxETUd3d1NsSmphRGh0VEU0dlR6Qm5VVE15WVRaTWVVNTRYRzV3VGxneFdUQnlObGM1WlZObmMyMVZNRzhyTDNWV05YcE9VVXRDWjFGRVNtVlhUMGtyVVRObmNGQjRlV2d6UjJkbGQyOUVZMUk0UXpGWWJtZHBNWEZSWEc1UGIyeDRhbTVSYlROUlpuTlZTMlZZYmpKaE1VcG5MM2hRYm5OdE5qRlpiMnhCTmtkRFRFVkxZWFpUZWs0elFtazFWVTAwYkcxVGJWQndiR0ZCVkdoaFhHNUNVMWRNUW1wWGRuZFpZVk0wUzJ0RWRIVmFhR3BoTjBwWmNpOTZjRkZ1WmtaTFZYZHFkV1ZHYUVGTWJVMVpRbmc0VFRGa056TnlSVmt4U2pkSk4xTmpYRzR2VFd0RU4wWkZZaTkzUzBKblVVUklhRGRJWm10UGFrcFJPRFYzY2tVM09HaHZLM2hGWTBsM2FIQjBSbXRZWkRoVFdrNDVNR2xWVVhCYWVXMHJTalpVWEc1WU4yMXRUM1ZPYUVoaFdrdGhibkJSY2tKNmNsTnljRkIyUlRoaVdTOXZWVkpVTkZsNlpYWkZNRVptV210cVNXRjNWVzkxTTFWQ1REbHdLMFJDTlRsQ1hHNU5Za04yUldOcWJtRkJNVmM0Y0RKSGNHOHZNamwxY0VGVU5qVkZNWEJIUVcxNE9HOTBkakpVY1ZCamN6RmlhMkpZU0VocWREZEtkMWxSUzBKblVVUkZYRzQxVFU5WlVtTlZRa3RHZFhBeFlVZ3JPSEE1Y21zMk5UVjRORkoyU1N0RWFXMU5TbVpZY0dNeWNqaFhhR1JaVlVSVldEQXZVbE0xU2xablZtMXRTa012WEc0MFZXdzRVbHAzTTBWVFYwbDVORWxwY3l0clNYTlVhekZ0Ymtkc2JYaEhiVXdyWkhKM1UzSlJWVE5IWm5OeWVWbzJOMGRxTTNGSVZrZzFUakZ0V0VaWVhHNVBUV0pwSzBwV1kxUjRTRU5SZEdoRVFXUkVRbTR4Y3pjNU9VUlJiRXRzWVhwc1VHOWhTbU4yYjNkTFFtZElURGRuUVc5a1IwTk5PVXRHWjNaaUwxSXZYRzU0TWpkV1RHRjRWRTUyZW10S2IxbEpkbVF6WVhkSlZYUllTamM1TVRSWGRGTnRNVlZZYVVwalp6a3dkQ3RoVlRFdmRGbDVjMGxyVDNWR2RrZFllVUZ1WEc1SFNHdGthVFZDYWpsYWMweDRUVXhsT1ZGd1pIbE9URkpTVkZCVlVESktiVWd3TVc5MVpuTXlaREpSVDNSdE1tMW5ObXBVTkZaVlJWcE9NVE12Y2tKMVhHNUhZMEk1TVc1SE1XSTBhRVpNWW1FeWFtRnRRV1l2ZWs1Y2JpMHRMUzB0UlU1RUlGQlNTVlpCVkVVZ1MwVlpMUzB0TFMxY2JpSXNDaUFnSW1Oc2FXVnVkRjlsYldGcGJDSTZJQ0puWTNJdFlXTmpaWE56TFhSdkxXcGxibXRwYm5OQWJHVjRhV05oYkMxaFkyOXNlWFJsTFRNMU1qZ3dOUzVwWVcwdVozTmxjblpwWTJWaFkyTnZkVzUwTG1OdmJTSXNDaUFnSW1Oc2FXVnVkRjlwWkNJNklDSXhNVFkzTkRneU1UWXlOelk0TnpFMU5UazNOVEVpTEFvZ0lDSmhkWFJvWDNWeWFTSTZJQ0pvZEhSd2N6b3ZMMkZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjB2Ynk5dllYVjBhREl2WVhWMGFDSXNDaUFnSW5SdmEyVnVYM1Z5YVNJNklDSm9kSFJ3Y3pvdkwyOWhkWFJvTWk1bmIyOW5iR1ZoY0dsekxtTnZiUzkwYjJ0bGJpSXNDaUFnSW1GMWRHaGZjSEp2ZG1sa1pYSmZlRFV3T1Y5alpYSjBYM1Z5YkNJNklDSm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVmhjR2x6TG1OdmJTOXZZWFYwYURJdmRqRXZZMlZ5ZEhNaUxBb2dJQ0pqYkdsbGJuUmZlRFV3T1Y5alpYSjBYM1Z5YkNJNklDSm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVmhjR2x6TG1OdmJTOXliMkp2ZEM5Mk1TOXRaWFJoWkdGMFlTOTROVEE1TDJkamNpMWhZMk5sYzNNdGRHOHRhbVZ1YTJsdWN5VTBNR3hsZUdsallXd3RZV052YkhsMFpTMHpOVEk0TURVdWFXRnRMbWR6WlhKMmFXTmxZV05qYjNWdWRDNWpiMjBpQ24wPSJ9fX0=
kind: Secret
metadata:
  name: gcr-image-pull-secret
  namespace: devops-tools
type: kubernetes.io/dockerconfigjson
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
  labels:
    app: my-app
  namespace: devops-tools
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      imagePullSecrets:
      - name: gcr-image-pull-secret
      containers:
      - name: my-app
        image: gcr.io/lexical-acolyte-352805/docker-image:latest
        ports:
        - containerPort: 8080
        # env:
        # - name: ASPNETCORE_URLS
        #   value: http://*:5000
---
# apiVersion: v1
# kind: Service
# metadata:
#   name: my-service
# spec:
#   type: LoadBalancer
#   selector:
#     app: my-app
#   ports:
#       # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
#     - port: 5000
#       targetPort: 5000
#       # Optional field
#       # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
#       # nodePort: 30007
apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: devops-tools
spec:
  type: LoadBalancer
  selector:
    app: my-app
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 8080
      targetPort: 8080
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      # nodePort: 30007.