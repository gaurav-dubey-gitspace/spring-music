@Library("maven-builder-library") _
import com.company.library.*

podTemplate = new podTemplate()
podTemplate.getPodTemplate() {

properties(
    [parameters([
        string(defaultValue: 'https://github.com/gaurav-dubey-gitspace/spring-music.git', description: 'URL for source code', name: 'REPOSITORY_URL'),
        string(defaultValue: 'rama.v@tcs.com', description: 'Email', name: 'EMAIL'),
        string(defaultValue: 'lexical-acolyte-352805', description: 'PROJECT ID', name: 'GKE_PROJECT_ID'),
        string(defaultValue: 'jenkins-ubuntu-containerd', description: 'GKE_CLUSTER_NAME', name: 'GKE_CLUSTER_NAME'),
        string(defaultValue: 'us-east1-b', description: 'GKE_LOCATION', name: 'GKE_LOCATION'),
        string(defaultValue: 'default', description: 'GKE_NAMESPACE', name: 'GKE_NAMESPACE')
        ])
    ])

node(POD_LABEL) {
    ansiColor('xterm') {
    // some block

    try {
container('gradle') {

    stage('Build Project') {

        git credentialsId: 'gaurav-dubey-gitspace-cred', url: "${params.REPOSITORY_URL}", branch: 'master'

        sh """#!/bin/bash
        git clone ${params.REPOSITORY_URL}
        cd ./spring-music/
        ./gradlew clean assemble
        ls ./build/libs/
        pwd
         """

        sh '''#!/bin/bash  
        mkdir artifactsToUpload 
        cp  /home/jenkins/agent/workspace/Gradle-builder/spring-music/build/libs/spring-music-1.0.jar artifactsToUpload/
                    '''

    }
}



container('docker') {

stage('Containerise') {

    // rtServer (
    // 	id: 'jfrog-artifactory-instance',
    // 	url: 'https://jenkinsjfrogserver231.jfrog.io/artifactory',
    // 	credentialsId: 'JenFrog-cred',
   	//  timeout: 300
	// )	

    // rtUpload (
    // serverId: 'jfrog-artifactory-instance',
    // specPath: './spec/jfrog/uploadSpec.json',
    //         )

    sh '''#!/bin/bash
    cp  artifactsToUpload/* dockerfiles/
    ls ./dockerfiles/
            '''


//     docker.withRegistry('https://jenkinsjfrogserver231.jfrog.io/artifactory', 'JenFrog-cred') {
//     script{
//         def customImage = docker.build("docker-repository-docker/docker-image", "/home/jenkins/agent/workspace/Gradle-builder/dockerfiles")
//         customImage.push()

//     }
// } 

    docker.withRegistry('https://gcr.io', 'gcr:gcr-access') {
    script{
        def customImage = docker.build("lexical-acolyte-352805/docker-image", "/home/jenkins/agent/workspace/Gradle-builder/dockerfiles")
        customImage.push()
    }
} 
              }

environment {
		        PROJECT_ID = 'lexical-acolyte-352805'
                CLUSTER_NAME = 'jenkins-ubuntu-containerd'
                LOCATION = 'us-east1-b'
                CREDENTIALS_ID = 'lexical-acolyte-352805'	
}

    }

container('gcloudsdk') {
        stage('Deploy to GKE test cluster') {
        kubectlInstaller()
        GKEdeployer()
        //                                sh """#!/bin/bash
        //            echo "Hi ${params.GKE_PROJECT_ID}"
        //            pwd
        //            gcloud --version
        //            gcloud container clusters list
        //            gcloud container clusters get-credentials jenkins-ubuntu-containerd --zone us-east1-b --project lexical-acolyte-352805
        //  """
    }
}

} //try end
finally {
    // post {
    // always {
        // echo "hello"
        // [emailext body: 'Test Message',
        // // recipientProviders: [developers(), requestor()],
        // recipientProviders: [[$class: 'DevelopersRecepientProvider'], [$class: 'RequesterRecipientProvider']],
        // subject: 'Test Subject']
        // to: 'test@example.com'

    // }
// }

            // mail to: "${params.EMAIL}",
            mail to: 'rama.v@tcs.com',
            subject: "Pipeline Build Result: ${currentBuild.fullDisplayName}",
            body: "Your deployment has completed successfully!:\n Application now accessible at: 35.243.244.150:8080 \n${env.BUILD_URL}"

} //finally end.
}
}
}




